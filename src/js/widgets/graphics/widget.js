define([
  'marionette',
  'js/widgets/base/base_widget',
  'js/components/api_request',
  'js/components/api_response',
  'js/components/api_query',
  'hbs!./templates/grid',
  'hbs!./templates/sidebar',
  'js/components/api_targets'


], function(
  Marionette,
  BaseWidget,
  ApiRequest,
  ApiResponse,
  ApiQuery,
  gridTemplate,
  sidebarTemplate,
  ApiTargets
  ){

  var GraphicsModel = Backbone.Model.extend({

    defaults : function(){

      return {
        graphics: undefined,
        title : undefined
      }
    }

  });


  var GridView = Marionette.ItemView.extend({

    template : gridTemplate,

    className : "s-graphics-grid",

    modelEvents : {
      "change" : "render"
    }

  });

  var SidebarView = Marionette.ItemView.extend({

    template: sidebarTemplate,

    className : "s-graphics-sidebar graphics-sidebar",

    modelEvents : {
      "change:graphics" : "render"
    },

    triggers :  {
      "click .graphics-container" : "showGraphicsGrid"
    },

    serializeData : function(){
      var graphics = this.model.toJSON().graphics;
      if (graphics){
        return {sampleGraphic : graphics[_.keys(graphics)[0]].thumbnail};
      }
      else {
        return {sampleGraphic : undefined};
      }
    }

  });


  var GraphicsWidget = BaseWidget.extend({

    initialize : function(options){
      options = options || {};
      this.model = new GraphicsModel();
      this.view = (options.sidebar === true) ? new SidebarView({model : this.model}) : new GridView({model : this.model});
      BaseWidget.prototype.initialize.apply(this, arguments);
    },

    activate: function (beehive) {
      this.pubsub = beehive.Services.get('PubSub');
      _.bindAll(this, ['onNewQuery', 'processResponse', 'onDisplayDocuments']);
      this.pubsub.subscribe(this.pubsub.START_SEARCH, this.onNewQuery);
      this.pubsub.subscribe(this.pubsub.DISPLAY_DOCUMENTS, this.onDisplayDocuments);
      this.pubsub.subscribe(this.pubsub.DELIVERING_RESPONSE, this.processResponse);
    },

    onNewQuery: function() {
      //so we don't show old data if the new data hasn't returned
      this.model.clear();
    },

    onDisplayDocuments: function(apiQuery) {
      var bibcode = apiQuery.get('q');
      var self = this;
      if (bibcode.length > 0 && bibcode[0].indexOf('bibcode:') > -1) {
        bibcode = bibcode[0].replace('bibcode:', '');
        this.loadBibcodeData(bibcode).done(function() {
          self.trigger('page-manager-event', 'widget-ready', {isActive: true, widget : self});
        });
      }
    },

    //load data, return a promise
    loadBibcodeData : function(bibcode){

      if (bibcode === this._bibcode){
        this.deferredObject =  $.Deferred();
        this.deferredObject.resolve(this.model);
        return this.deferredObject.promise();
      }
      else {
        this._bibcode = bibcode;
        this.deferredObject =  $.Deferred();
        var request = new ApiRequest({
          target: ApiTargets.GRAPHICS + "/" + this._bibcode,
          query : new ApiQuery()
        });
        this.pubsub.publish(this.pubsub.DELIVERING_REQUEST, request);

        //now ask for the title if it's the main widget
        if (!Marionette.getOption(this, "sidebar")){
          var query = this.getCurrentQuery().clone();
          query.unlock();
          query.set("q", "bibcode:"+bibcode);
          query.set("fl", "title");

          var request = new ApiRequest({
            target: ApiTargets.SEARCH,
            query: query
          });
          this.pubsub.publish(this.pubsub.DELIVERING_REQUEST, request);
        }
        return this.deferredObject.promise();
      }
    },

    //if there is no data, there will be no response

    processResponse : function(response){

      if (!(response instanceof ApiResponse)){
        //it's from the graphics service

        //was there data for the bibcode?
        if (response.attributes.Error){
          return
        }

        var graphics = {};
        _.each(response.get("figures"), function(dict){
          graphics[dict.figure_label] = dict.images[0];
        },this);

        this.model.set("graphics", graphics);
      }
      else {
        var title = response.get("response.docs[0]['title']");
        title = (title && title.length) ? title[0] : "";
        this.model.set("title", title);
      }

      //resolving the promises generated by "loadBibcodeData"
      if (this.deferredObject && this.model.get("title") && this.model.get("graphics")){
        this.deferredObject.resolve();
      }
    },

    viewEvents : {
      "showGraphicsGrid" : "triggerShowGrid"
    },

    triggerShowGrid : function(){
      this.pubsub.publish(this.pubsub.NAVIGATE, "ShowGraphics");
    }

  });

  return GraphicsWidget;



})